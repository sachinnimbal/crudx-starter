plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'com.gradleup.nmcp' version '0.0.8'
}

//apply from : "gradle/author.gradle"
//apply from : "gradle/publishing.gradle"

group = project.findProperty("group")
version = project.findProperty("version")
description = project.findProperty("description")

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withSourcesJar()
    withJavadocJar()
    tasks.withType(Jar).tap {
        configureEach {
            manifest {
                attributes(
                        'Implementation-Title': project.name,
                        'Implementation-Version': project.version,
                        'Implementation-Vendor': 'Sachin Nimbal',
                        'Built-By': 'Sachin Nimbal',
                        'Built-Date': new Date().format('yyyy-MM-dd HH:mm:ss'),
                        'Copyright': "Copyright ${project.findProperty('author.copyrightYear')} Sachin Nimbal"
                )
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'org.springframework.boot:spring-boot-dependencies:3.5.6'
    }
}

dependencies {
    // 👇 Public API dependencies (exposed to users of your framework)
    api 'org.springframework.boot:spring-boot-starter-validation'      // For javax/jakarta validation annotations
    api 'org.springframework.boot:spring-boot-starter-aop'             // Required if you expose @Aspect support
    api 'org.springframework:spring-context'                            // Core Spring context
    api 'org.springframework:spring-tx'                                 // Transaction management (e.g., PlatformTransactionManager)
    api 'org.springframework.boot:spring-boot-configuration-processor' // Generates metadata for auto-complete
    api 'org.springframework.boot:spring-boot-autoconfigure'           // Required for @ConditionalOnX annotations
    api 'org.springframework.boot:spring-boot-starter-web'             // REST controllers, MVC support
    api 'org.springframework.boot:spring-boot-starter-actuator'        // Expose HealthIndicators or metrics from your framework
    api 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4'      // OpenAPI UI support, exposed to users
    api 'jakarta.persistence:jakarta.persistence-api'                   // So your framework can define entities/interfaces using JPA annotations

    // 👇 Optional integrations — not needed unless the user's project uses them
    compileOnly 'org.springframework.boot:spring-boot-starter-data-mongodb' // Optional MongoDB support
    compileOnly 'org.springframework.boot:spring-boot-starter-data-jpa'     // Optional JPA support
    compileOnly 'com.mysql:mysql-connector-j'                                // Optional MySQL support
    compileOnly 'org.postgresql:postgresql'                                  // Optional PostgreSQL support
    compileOnly 'com.github.ben-manes.caffeine:caffeine:3.1.8'               // Optional Caffeine caching support
    compileOnly 'org.springframework.boot:spring-boot-starter-data-redis'   // Optional Redis caching support
    compileOnly 'com.hazelcast:hazelcast:5.3.6'                              // Optional Hazelcast caching support
    compileOnly 'org.ehcache:ehcache:3.10.8'                                 // Optional Ehcache support
    compileOnly 'net.spy:spymemcached:2.12.3'                                // Optional Memcached support
    compileOnly 'org.projectlombok:lombok'                                   // Compile-time annotations (e.g., @Getter)
    compileOnly 'com.google.guava:guava:32.1.2-jre'                          // For internal optional use (e.g., RateLimiter)

    annotationProcessor 'org.projectlombok:lombok'                           // Enables Lombok at compile-time

    // 👇 Internal runtime dependencies (used by your framework, not exposed)
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' // For internal view rendering (if needed)
    implementation 'org.slf4j:slf4j-api'                                     // For internal logging
    implementation 'com.fasterxml.jackson.core:jackson-databind'            // JSON handling
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310' // Support for Java 8 date/time in JSON

    // 👇 Test-only dependencies (used in framework test cases)
    testImplementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.4' // OpenAPI for testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'       // Spring Boot test utilities
    testImplementation 'org.springframework.boot:spring-boot-starter-data-jpa'   // JPA tests
    testImplementation 'org.springframework.boot:spring-boot-starter-data-mongodb' // Mongo tests
    testImplementation 'org.testcontainers:junit-jupiter'                        // For containerized DB tests
    testImplementation 'org.testcontainers:mongodb'
    testImplementation 'org.testcontainers:mysql'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'com.mysql:mysql-connector-j'
    testImplementation 'org.postgresql:postgresql'

    // 👇 Lombok in test sources
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    options.compilerArgs.add('-parameters')
}

tasks.withType(Javadoc).configureEach {
    options.encoding = 'UTF-8'
    options.addBooleanOption('Xdoclint:none', true)
}


tasks.register('generateVersionProperties') {
    def propertiesFile = layout.buildDirectory.file('resources/main/crudx-version.properties')
    outputs.file(propertiesFile)

    doLast {
        def file = propertiesFile.get().asFile
        file.parentFile.mkdirs()
        file.text = """# CrudX Framework Version
# Copyright 2025 Sachin Nimbal
#  *
#  * Licensed under the Apache License, Version 2.0 (the "License");
#  * you may not use this file except in compliance with the License.
#  * You may obtain a copy of the License at
#  *
#  *     http://www.apache.org/licenses/LICENSE-2.0
#  *
#  * Unless required by applicable law or agreed to in writing, software
#  * distributed under the License is distributed on an "AS IS" BASIS,
#  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  * See the License for the specific language governing permissions and
#  * limitations under the License.
version=${project.version}
group=${project.group}
artifact=${project.name}
description=${project.description}
author.name=${project.findProperty('author.name')}
author.email=${project.findProperty('author.email')}
author.linkedin=${project.findProperty('author.linkedin')}
copyright.year=${project.findProperty('author.copyrightYear')}
build.date=${new Date().format('yyyy-MM-dd HH:mm:ss')}
"""
        logger.lifecycle("✓ Generated version properties: ${file.absolutePath}")
    }
}

// ============================================================
// NEW: Generate META-INF/services for Annotation Processor
// ============================================================
tasks.register('generateAnnotationProcessorService') {
    def serviceDir = layout.buildDirectory.dir('resources/main/META-INF/services')
    def serviceFile = serviceDir.map { it.file('javax.annotation.processing.Processor') }
    outputs.file(serviceFile)

    doLast {
        def file = serviceFile.get().asFile
        file.parentFile.mkdirs()
        file.text = """io.github.sachinnimbal.crudx.annotation.processor.CrudXDtoValidationProcessor
"""
        logger.lifecycle("✓ Generated Annotation Processor service file: ${file.absolutePath}")
    }
}

tasks.named('compileJava') {
    dependsOn 'generateVersionProperties', 'generateAnnotationProcessorService'
}

tasks.named('processResources') {
    dependsOn 'generateVersionProperties', 'generateAnnotationProcessorService'
}

tasks.withType(JavaExec).configureEach {
    systemProperty 'crudx.version', project.version
    systemProperty 'crudx.group', project.group
}

tasks.withType(Test).configureEach {
    systemProperty 'crudx.version', project.version
    systemProperty 'crudx.group', project.group
}

tasks.named('clean') {
    doLast {
        def versionFile = layout.buildDirectory.file('resources/main/crudx-version.properties').get().asFile
        def serviceFile = layout.buildDirectory.file('resources/main/META-INF/services/javax.annotation.processing.Processor').get().asFile

        if (versionFile.exists()) {
            versionFile.delete()
            logger.lifecycle("✓ Cleaned version properties file")
        }

        if (serviceFile.exists()) {
            serviceFile.delete()
            logger.lifecycle("✓ Cleaned annotation processor service file")
        }
    }
}

tasks.register('verifyVersion') {
    group = 'verification'
    description = 'Verifies that the version and annotation processor are correctly configured'

    doLast {
        println """
╔═══════════════════════════════════════════════════════════╗
║           CrudX Framework Version Information             ║
╠═══════════════════════════════════════════════════════════╣
║ Version:     ${project.version}
║ Group:       ${project.group}
║ Artifact:    ${project.name}
║ Description: ${project.description}
║ Author:      ${project.findProperty('author.name')}
║ Email:       ${project.findProperty('author.email')}
║ LinkedIn:    ${project.findProperty('author.linkedin')}
║ Copyright:   © ${project.findProperty('author.copyrightYear')} Sachin Nimbal
╚═══════════════════════════════════════════════════════════╝
"""

        def versionFile = layout.buildDirectory.file('resources/main/crudx-version.properties').get().asFile
        def serviceFile = layout.buildDirectory.file('resources/main/META-INF/services/javax.annotation.processing.Processor').get().asFile

        if (versionFile.exists()) {
            println "✓ Version properties file exists: ${versionFile.absolutePath}"
        } else {
            println "✗ Version properties file not found. Run './gradlew build'"
        }

        if (serviceFile.exists()) {
            println "✓ Annotation Processor service file exists: ${serviceFile.absolutePath}"
        } else {
            println "✗ Annotation Processor service file not found. Run './gradlew build'"
        }
    }
}