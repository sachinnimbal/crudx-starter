package io.github.sachinnimbal.crudx.core.dto.metadata;

import jakarta.annotation.PostConstruct;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.io.IOException;
import java.io.InputStream;
import java.util.*;

/**
 * Reads compile-time DTO metadata generated by CrudXDTOCompileTimeTracker
 * Provides runtime access to DTO mapping information
 */
@Slf4j
@Component
public class CrudXDTOMetadataReader {

    private final Map<String, EntityDTOInfo> metadata = new LinkedHashMap<>();
    private boolean metadataAvailable = false;

    @PostConstruct
    public void loadMetadata() {
        try (InputStream is = getClass().getClassLoader()
                .getResourceAsStream("META-INF/crudx-dto-metadata.properties")) {

            if (is == null) {
                log.debug("No compile-time DTO metadata found (this is normal if no DTOs are configured)");
                return;
            }

            Properties props = new Properties();
            props.load(is);

            parseMetadata(props);
            metadataAvailable = true;

            log.info("âœ“ Loaded compile-time DTO metadata for {} entities", metadata.size());
            logMetadataSummary();

        } catch (IOException e) {
            log.warn("Failed to load DTO metadata: {}", e.getMessage());
        }
    }

    private void parseMetadata(Properties props) {
        Set<String> entityNames = new HashSet<>();

        // Extract entity names
        for (String key : props.stringPropertyNames()) {
            if (key.endsWith(".request.count") || key.endsWith(".response.count")) {
                String entityName = key.substring(0, key.lastIndexOf('.'));
                entityName = entityName.substring(0, entityName.lastIndexOf('.'));
                entityNames.add(entityName);
            }
        }

        // Parse metadata for each entity
        for (String entityName : entityNames) {
            EntityDTOInfo info = new EntityDTOInfo(entityName);

            // Request DTOs
            String requestCount = props.getProperty(entityName + ".request.count");
            if (requestCount != null) {
                info.requestDTOCount = Integer.parseInt(requestCount);

                String dtos = props.getProperty(entityName + ".request.dtos");
                if (dtos != null) {
                    info.requestDTOs.addAll(Arrays.asList(dtos.split(",")));
                }

                String names = props.getProperty(entityName + ".request.names");
                if (names != null) {
                    info.requestDTONames.addAll(Arrays.asList(names.split(",")));
                }
            }

            // Response DTOs
            String responseCount = props.getProperty(entityName + ".response.count");
            if (responseCount != null) {
                info.responseDTOCount = Integer.parseInt(responseCount);

                String dtos = props.getProperty(entityName + ".response.dtos");
                if (dtos != null) {
                    info.responseDTOs.addAll(Arrays.asList(dtos.split(",")));
                }

                String names = props.getProperty(entityName + ".response.names");
                if (names != null) {
                    info.responseDTONames.addAll(Arrays.asList(names.split(",")));
                }
            }

            metadata.put(entityName, info);
        }
    }

    private void logMetadataSummary() {
        int totalRequestDTOs = metadata.values().stream()
                .mapToInt(info -> info.requestDTOCount)
                .sum();

        int totalResponseDTOs = metadata.values().stream()
                .mapToInt(info -> info.responseDTOCount)
                .sum();

        log.info("ðŸ“Š DTO Summary - Entities: {}, Request DTOs: {}, Response DTOs: {}",
                metadata.size(), totalRequestDTOs, totalResponseDTOs);

        // Detailed logging at debug level
        if (log.isDebugEnabled()) {
            metadata.forEach((entityName, info) -> {
                log.debug("  {} -> Request: {}, Response: {}",
                        entityName, info.requestDTONames, info.responseDTONames);
            });
        }
    }

    public boolean isMetadataAvailable() {
        return metadataAvailable;
    }

    public Optional<EntityDTOInfo> getEntityInfo(String entityName) {
        return Optional.ofNullable(metadata.get(entityName));
    }

    public Optional<EntityDTOInfo> getEntityInfo(Class<?> entityClass) {
        return getEntityInfo(entityClass.getName());
    }

    public Map<String, EntityDTOInfo> getAllMetadata() {
        return Collections.unmodifiableMap(metadata);
    }

    public boolean hasRequestDTO(String entityName) {
        return metadata.containsKey(entityName) &&
                metadata.get(entityName).requestDTOCount > 0;
    }

    public boolean hasResponseDTO(String entityName) {
        return metadata.containsKey(entityName) &&
                metadata.get(entityName).responseDTOCount > 0;
    }

    public static class EntityDTOInfo {
        private final String entityName;
        private int requestDTOCount = 0;
        private int responseDTOCount = 0;
        private final List<String> requestDTOs = new ArrayList<>();
        private final List<String> requestDTONames = new ArrayList<>();
        private final List<String> responseDTOs = new ArrayList<>();
        private final List<String> responseDTONames = new ArrayList<>();

        public EntityDTOInfo(String entityName) {
            this.entityName = entityName;
        }

        public String getEntityName() {
            return entityName;
        }

        public int getRequestDTOCount() {
            return requestDTOCount;
        }

        public int getResponseDTOCount() {
            return responseDTOCount;
        }

        public List<String> getRequestDTOs() {
            return Collections.unmodifiableList(requestDTOs);
        }

        public List<String> getRequestDTONames() {
            return Collections.unmodifiableList(requestDTONames);
        }

        public List<String> getResponseDTOs() {
            return Collections.unmodifiableList(responseDTOs);
        }

        public List<String> getResponseDTONames() {
            return Collections.unmodifiableList(responseDTONames);
        }

        @Override
        public String toString() {
            return String.format("EntityDTOInfo{entity='%s', request=%d, response=%d}",
                    entityName, requestDTOCount, responseDTOCount);
        }
    }
}